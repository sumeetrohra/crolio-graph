// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bucket extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bucket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Bucket must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bucket", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Bucket | null {
    return changetype<Bucket | null>(store.get("Bucket", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get bucketId(): BigInt {
    let value = this.get("bucketId");
    return value!.toBigInt();
  }

  set bucketId(value: BigInt) {
    this.set("bucketId", Value.fromBigInt(value));
  }

  get bucketName(): string {
    let value = this.get("bucketName");
    return value!.toString();
  }

  set bucketName(value: string) {
    this.set("bucketName", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get tokens(): Array<Bytes> {
    let value = this.get("tokens");
    return value!.toBytesArray();
  }

  set tokens(value: Array<Bytes>) {
    this.set("tokens", Value.fromBytesArray(value));
  }

  get weightages(): Array<BigInt> {
    let value = this.get("weightages");
    return value!.toBigIntArray();
  }

  set weightages(value: Array<BigInt>) {
    this.set("weightages", Value.fromBigIntArray(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class InvestedInBucket extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InvestedInBucket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type InvestedInBucket must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InvestedInBucket", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): InvestedInBucket | null {
    return changetype<InvestedInBucket | null>(
      store.get("InvestedInBucket", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get bucketId(): BigInt {
    let value = this.get("bucketId");
    return value!.toBigInt();
  }

  set bucketId(value: BigInt) {
    this.set("bucketId", Value.fromBigInt(value));
  }

  get amountInvested(): BigInt {
    let value = this.get("amountInvested");
    return value!.toBigInt();
  }

  set amountInvested(value: BigInt) {
    this.set("amountInvested", Value.fromBigInt(value));
  }

  get investorAddress(): Bytes {
    let value = this.get("investorAddress");
    return value!.toBytes();
  }

  set investorAddress(value: Bytes) {
    this.set("investorAddress", Value.fromBytes(value));
  }

  get tokens(): Array<Bytes> {
    let value = this.get("tokens");
    return value!.toBytesArray();
  }

  set tokens(value: Array<Bytes>) {
    this.set("tokens", Value.fromBytesArray(value));
  }

  get holdingsBought(): Array<BigInt> {
    let value = this.get("holdingsBought");
    return value!.toBigIntArray();
  }

  set holdingsBought(value: Array<BigInt>) {
    this.set("holdingsBought", Value.fromBigIntArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class WithdrawnFromBucket extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawnFromBucket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type WithdrawnFromBucket must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawnFromBucket", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): WithdrawnFromBucket | null {
    return changetype<WithdrawnFromBucket | null>(
      store.get("WithdrawnFromBucket", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get bucketId(): BigInt {
    let value = this.get("bucketId");
    return value!.toBigInt();
  }

  set bucketId(value: BigInt) {
    this.set("bucketId", Value.fromBigInt(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    return value!.toBigInt();
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get investorAddress(): Bytes {
    let value = this.get("investorAddress");
    return value!.toBytes();
  }

  set investorAddress(value: Bytes) {
    this.set("investorAddress", Value.fromBytes(value));
  }

  get tokens(): Array<Bytes> {
    let value = this.get("tokens");
    return value!.toBytesArray();
  }

  set tokens(value: Array<Bytes>) {
    this.set("tokens", Value.fromBytesArray(value));
  }

  get holdingsSold(): Array<BigInt> {
    let value = this.get("holdingsSold");
    return value!.toBigIntArray();
  }

  set holdingsSold(value: Array<BigInt>) {
    this.set("holdingsSold", Value.fromBigIntArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
